#include "bisearchtree.h"
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
/************************************************************************
 二叉排序树或者是一棵空树，或者是具有下列性质的二叉树：
 （1）若左子树不空，则左子树上所有结点的值均小于或等于它的根结点的值
 （2）若右子树不空，则右子树上所有结点的值均大于或等于它的根结点的值；
 （3）左、右子树也分别为二叉排序树；

 *************************************************************************/

/**
 *  创建二叉查找树
 *
 *  @return 指向一颗空树的指针
 */
BiSearchTree *bisearch_tree_new() {
	return NULL;
}

/**
 *  插入节点
 *
 *  @param tree tree a pointer to the root of a tree
 *  @param node 节点值 new inserted value
 */
BiSearchTree *bisearch_tree_insert(BiSearchTree *tree, ElemType node) {
	BiSearchTree *t = tree;
	BiSearchTree *parent = NULL;
	BiSearchTree *newNode = (BiSearchTree *) malloc(sizeof(BiSearchTree));
	if (NULL == newNode) {
		printf("malloc failure\n");
		return tree;
	}
	newNode->key = node;
	newNode->lChild = NULL;
	newNode->rChild = NULL;
	// if no element created before
	if (NULL == t) {
		tree = newNode;
		printf("insert first node %d!\n", node);
		return tree;
	}
//  printf("should not run to here for the first element insertion!");
	// 找合适的位置 how to make t point to NULL when insert end
	// **notice**  duplicate element are not allowed to insert and will be ignored
	// sink to find location to insert the newNode, until it reach the leaf

	/*
	 *  跳出循环的时候,t 指向NULL, 但是往回找 t 的父节点,有没办法知道,所以需要每次移动,记录父节点的位置
	 */
	while (t != NULL) {
		// find right
		if (node > t->key) {
			// parent 的作用理解了
			parent = t;
			t = t->rChild;
		}
		// find left
		else if (node < t->key) {
			parent = t;
			t = t->lChild;
		}
		// ignore
		else {
			parent = t;
			printf("insert ignore:bi search tree has the node %d!\n", node);
			break;
		}
	}

	if (NULL == parent)
		return tree;
	if (node < parent->key) {
		parent->lChild = newNode;
		printf("insert node %d to left of %d\n", node, parent->key);
	}
	// c 语言种 else if 必须分开写
	else {
		parent->rChild = newNode;
		printf("insert node %d to right of %d\n", node, parent->key);
	}
	return tree;
}

/**
 *  查找节点
 *
 *  @param tree tree
 *  @param node 节点值
 * （也可以使用递归方式实现）
 *
 */
// redefinition of ‘bisearch_tree_search’
// did not included this function in header file previously
int bisearch_tree_search_recursive(BiSearchTree *tree, ElemType node) {

// find node on tree
	BiSearchTree *t;
// declare and  initiate could not done by one line for a pointer
	t = tree;
	if (NULL == t)
		return -1;
	printf("compare with %d:\n", t->key);
	if (node == t->key) {
		return 0;
	} else if (node < t->key) {
		// search left
		return bisearch_tree_search_recursive(t->lChild, node);
	} else {
		return bisearch_tree_search_recursive(t->rChild, node);
	}
}


// implemented with a while loop
int bisearch_tree_search(BiSearchTree *tree, ElemType node) {
	BiSearchTree *t;
	t = tree;
// notice : use pointer t to travel and move, tree point to the root node of the tree, do not touch it
// fixed
	while (NULL != t) {
		if (node == t->key) {
			return 0;
		} else if (node < t->key) {
			// move left
			t = t->lChild;
		} else {
			t = t->rChild;
		}
	}
	return -1;
}

//private
int _delete_node(BiSearchTree *node, BiSearchTree*parent) {

//该节点为叶子节点，直接删除
	if (!node->rChild && !node->lChild) {

		free(node);    //父节点？？？不然野指针,造成崩溃
	} else if (!node->rChild) {	//右子树空则只需重接它的左子树
		BiSearchTree *target = node->lChild;
		node->key = node->lChild->key;
		node->lChild = node->lChild->lChild;
		node->rChild = node->lChild->rChild;

		free(target);
	} else if (!node->lChild) {	//左子树空只需重接它的右子树
		BiSearchTree *target = node->rChild;
		node->key = node->rChild->key;
		node->lChild = node->rChild->lChild;
		node->rChild = node->rChild->rChild;

		free(target);
	} else {	//左右子树均不空

		BiSearchTree *parent = node, *target = node->lChild;
		while (target->rChild) {
			parent = target;
			target = target->rChild;
		}	// 找到左子树最大的，是删除节点的直接“前驱”

		node->key = target->key;

		if (target != node) {
			parent->rChild = target->lChild;
		} else {
			node->lChild = target->lChild;
		}

		free(target);
	}
	return 0;
}

/**
 * 中序遍历节点，也就是从小到大输出
 */
void bisearch_tree_inorder_traversal_internal(BiSearchTree *tree);

// void bisearch_tree_inorder_traversal_internal(BiSearchTree *tree)
// declare before call
void bisearch_tree_inorder_traversal(BiSearchTree *tree) {
// if tree is not null
	if (tree) {
		printf("[ ");
		bisearch_tree_inorder_traversal_internal(tree);
		printf("]\n");
//		putchar('\n');
	}
}

void bisearch_tree_inorder_traversal_internal(BiSearchTree *tree) {
	if (tree) {
		bisearch_tree_inorder_traversal_internal(tree->lChild);
		printf("%d, ", tree->key);
		bisearch_tree_inorder_traversal_internal(tree->rChild);
	}
}
